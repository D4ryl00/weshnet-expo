//
//  PromiseBlock.swift
//  GoBridge
//
//  Created by Guilhem Fanton on 30/07/2020.
//  Copyright Â© 2020 Berty Technologies. All rights reserved.
//

import Foundation
import Bertybridge

var promises = Set<PromiseBlock>()
let promisesQueue = DispatchQueue(label: "tech.berty.ios.promises.queue")
let rejectErrorMessage = "cannot resolve nil reply"
let resolveErrorMessage = "cannot reject nil error"

// PromiseBlock aim to keep reference over promise object so go can play with
// until the promise is resolved
class PromiseBlock: NSObject, BertybridgePromiseBlockProtocol, Hashable {

  static func == (lhs: PromiseBlock, rhs: PromiseBlock) -> Bool {
    return lhs === rhs
  }

  func hash(into hasher: inout Hasher) {
    hasher.combine(ObjectIdentifier(self))
  }

  var resolve: RCTPromiseResolveBlock
  var reject: RCTPromiseRejectBlock

  init(resolve: RCTPromiseResolveBlock?, reject: RCTPromiseRejectBlock?) {
    self.reject = reject ?? {_, _, _ in }
    self.resolve = resolve ?? { _ in }
    
    super.init()
    self.store()
  }

  func callResolve(_ reply: String?) {
    if let reply = reply {
        self.resolve(reply)
    } else {
        self.reject("CallResolve", rejectErrorMessage, nil)
    }

    self.remove()
  }

  func callReject(_ error: Error?) {
    if let error = error {
        self.reject("rejected", error.localizedDescription, error)
    } else {
        self.reject("CallReject", resolveErrorMessage, nil)
    }

    self.remove()
  }

  func store() {
    promisesQueue.sync {
      promises.insert(self)
    }
  }

  func remove() -> Void {
    promisesQueue.sync {
      promises.remove(self)
    }
  }
}
